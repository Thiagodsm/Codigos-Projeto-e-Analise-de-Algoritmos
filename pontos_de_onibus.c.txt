#include <stdio.h> 
#include <stdlib.h> 
#include <string.h>
 
#define MAX 200000
 
int pontos_de_onibus[MAX];
int trechos[MAX];
 
struct Edge{
    int u, v, distancia;
};
typedef struct Edge aresta;
 
 
void define_rotas(int pontos_de_onibus[], int trechos[], int n){
    int i;
    for(i = 0; i < n; i++){
        pontos_de_onibus[i] = i;
        trechos[i] = 1;
    }
}
 
int verifica_ponto(int pontos_de_onibus[], int u){
    while (pontos_de_onibus[u] != u){
        pontos_de_onibus[u] = pontos_de_onibus[pontos_de_onibus[u]];
        u = pontos_de_onibus[u];
    }
    return u;    
}
 
void une_trechos(int pontos_de_onibus[], int trechos[], int u, int v){
    int origem_u = verifica_ponto(pontos_de_onibus, u);
    int origem_v = verifica_ponto(pontos_de_onibus, v);
    if(trechos[origem_u] < trechos[origem_v]){
        pontos_de_onibus[origem_u] = pontos_de_onibus[origem_v];
        trechos[origem_v] += trechos[origem_u];
    }
    else{
        pontos_de_onibus[origem_v] = pontos_de_onibus[origem_u];
        trechos[origem_u] += trechos[origem_v];
    }
}
 
int kruskal(aresta vet[], int n){
    int i, custo_minimo = 0;
    for (i = 0; i < n; i++){
        if(verifica_ponto(pontos_de_onibus, vet[i].u) != verifica_ponto(pontos_de_onibus, vet[i].v)){
            custo_minimo += vet[i].distancia;
            une_trechos(pontos_de_onibus, trechos, vet[i].u, vet[i].v);
        }
    }
    return custo_minimo;    
}
 
int compara_distancia(const void *a, const void *b){
    aresta A = *(const aresta *)a;
    aresta B = *(const aresta *)b;
    if((A).distancia < (B).distancia)
        return -1;
    return 1;
}
 
int main(){
    int n, m, i, total = 0, min;
    scanf("%d %d", &m, &n);
    aresta a[n];
    define_rotas(pontos_de_onibus, trechos, n);
    for(i = 0; i < n; i++){
        scanf("%d %d %d", &a[i].u, &a[i].v, &a[i].distancia);
        total += a[i].distancia;
    }
    // ordena o vetor com as arestas pela distancia.
    qsort((void *)a, n, sizeof(a[0]), compara_distancia);
    min = kruskal(a, n);
    int x = total - min;
    printf("%d\n", x);    
}
